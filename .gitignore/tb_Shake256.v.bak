`timescale 1ns / 1ps

module tb_Shake256;

    reg clk;
    reg reset;
    reg enable;
    reg serial_in;
    reg serial_end_signal;
    reg start;
    wire done;
    wire [511:0] digest; // Adjusted for 512-bit output

    // Instantiate the SHAKE256 module
    SHAKE256 dut (
        .clk(clk),
        .reset(reset),
        .enable(enable),
        .serial_in(serial_in),
        .serial_end_signal(serial_end_signal),
        .start(start),
        .done(done),
        .digest(digest)
    );
	 

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 100 MHz clock
    end
	 
	 initial begin
    $monitor("Time: %t, Reset: %b, Start: %b, Done: %b, Digest: %h", $time, reset, start, done, digest);
	 end
	 
	 


    // Reset and test sequence
    initial begin
        reset = 1; #10;
        reset = 0;
        enable = 0;
        serial_in = 0;
        serial_end_signal = 0;
        start = 0;
        
        // Start the test after the reset
        #20; // Wait for a few clock cycles
        start = 1; #10;
        start = 0;
        serial_end_signal = 1; #10; 
        serial_end_signal = 0;
        
        // Wait for hashing to complete
        wait(done == 1);
        #10;
		  
        
        // Check output
        if (digest === 512'h46B9DD2B0BA88D13233B3FEB743EEB243FCD52EA62B81B82B50C27646ED5762FD75DC4DDD8C0F200CB05019D67B592F6FC821C49479AB48640292EACB3B7C4BE141E96616FB13957692CC7EDD0B45AE3DC07223C8E92937BEF84BC0EAB862853349EC75546F58FB7C2775C38462C5010D846C185C15111E595522A6BCD16CF86F3D122109E3B1FDD943B6AEC468A2D621A7C06C6A957C62B54DAFC3BE87567D677231395F6147293B68CEAB7A9E0C58D864E8EFDE4E1B9A46CBE854713672F5CAAAE314ED9083DAB4B099F8E300F01B8650F1F4B1D8FCF3F3CB53FB8E9EB2EA203BDC970F50AE55428A91F7F53AC266B28419C3778A15FD248D339EDE785FB7F5A1AAA96D313EACC890936C173CDCD0FAB882C45755FEB3AED96D477FF96390BF9A66D1368B208E21F7C10D04A3DBD4E360633E5DB4B602601C14CEA737DB3DCF722632CC77851CBDDE2AAF0A33A07B373445DF490CC8FC1E4160FF118378F11F0477DE055A81A9EDA57A4A2CFB0C83929D310912F729EC6CFA36C6AC6A75837143045D791CC85EFF5B21932F23861BCF23A52B5DA67EAF7BAAE0F5FB1369DB78F3AC45F8C4AC5671D85735CDDDB09D2B1E34A1FC066FF4A162CB263D6541274AE2FCC865F618ABE27C124CD8B074CCD516301B91875824D09958F341EF274BDAB0BAE316339894304E35877B0C28A9B1FD166C796B9CC258A064A8F57E27F2A) begin
            $display("Test Passed: Correct Digest Computed.");
        end else begin
            $display("Test Failed: Incorrect Digest.");
        end

        $stop;
    end
	 
	 

endmodule
