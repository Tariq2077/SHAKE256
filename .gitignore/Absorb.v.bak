

module Absorb(
    input clk,
    input start,
    input [1599:0] state_in,
    input [1599:0] Block,
    output reg [1599:0] absorb_state_out,
	 output reg done_absorb
);

    reg [10:0] i; // 5-bit register for iteration (0 to 24)

    always @(posedge clk) begin
        if (start) begin

            absorb_state_out <= state_in; // Initialize absorb_state_out with state_in
            i <= 0;                // Reset iteration counter
        end else if (i < 1600) begin
            absorb_state_out[i] <= absorb_state_out[i] ^ Block[i]; // XOR operation
				//$display("Test Case 2: state_out = %h (Expected: XOR result)", state_out[i] ^ Block[i]);

            i <= i + 1;         // Increment iteration counter
        end
			if(i >= 1600) begin
			done_absorb <= 1'b1;

			end
    end
endmodule

