module pad136(
    input wire clk,
    input wire reset,
    input wire enable,
    input wire serial_in,
    input wire serial_end_signal,
    output reg [1087:0] message,
    output reg valid_output,
    output reg error_flag
);

    reg [10:0] bit_counter;
    reg padding;

    // State encoding
    localparam STATE_INPUT   = 1'b0;
    localparam STATE_PADDING = 1'b1;
    reg state;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            message        <= 0;
            message[1087]  <= 1'b1;  // Set the last bit to '1' during reset
            valid_output   <= 0;
            error_flag     <= 0;
            bit_counter    <= 0;
            padding        <= 0;
            state          <= STATE_INPUT;
        end else if (enable) begin
            case (state)
                STATE_INPUT: begin
                    if (serial_end_signal) begin
                        // Append the '1' padding bit after the input message
                        if (bit_counter < 1087) begin
                            message[bit_counter] <= 1'b1;
                            bit_counter <= bit_counter + 1;
                            padding <= 1;
                            state <= STATE_PADDING;
                        end else begin
                            error_flag <= 1; // Not enough space for padding
                            valid_output <= 1;
                        end
                    end else begin
                        if (bit_counter < 1087) begin // Leave space for padding and last '1' bit
                            message[bit_counter] <= serial_in;
                            bit_counter <= bit_counter + 1;
                        end else begin
                            error_flag <= 1; // Input too long
                            valid_output <= 1;
                        end
                    end
                end

                STATE_PADDING: begin
                    if (bit_counter < 1087) begin
                        // Fill remaining bits with zeros up to bit 1086
                        message[bit_counter] <= 1'b0;
                        bit_counter <= bit_counter + 1;
                    end else begin
                        // Reached the last bit, which is already set to '1'
                        valid_output <= 1;
                        padding <= 0;
                    end
                end

                default: state <= STATE_INPUT;
            endcase
        end
    end
endmodule
