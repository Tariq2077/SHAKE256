std:
# Squeeze Module: Extracted bits = dd1f3b9e1022d1f386cf16cd6b2a5295e51151c185c146d810502c46385c77c2b78ff54655c79e34532886ab0ebc84ef7b93928e3c2207dce35ab4d0edc72c695739b16f61961e14bec4b7b3ac2e294086b49a47491c82fcf692b5679d0105cb00f2c0d8ddc45dd72f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23138da80b2bddb946
# Truncate Module: Output digest = 2f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23138da80b2bddb946
# Final digest: 2f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23138da80b2bddb946
# SHAKE256 test FAILED.


reverse:

# Squeeze Module: Extracted bits = 5739b16f61961e14e35ab4d0edc72c697b93928e3c2207dc532886ab0ebc84efb78ff54655c79e3410502c46385c77c2e51151c185c146d886cf16cd6b2a5295dd1f3b9e1022d1f33a875b0deff46433b8ff7998f9f60fe40162d17ae444523de22da86c64fd3bd6d395c1c0d7fde4b7d8eb09f89dc1511271ddd284a934f091ec77442301d68b89
# Truncate Module: Output digest = d395c1c0d7fde4b7d8eb09f89dc1511271ddd284a934f091ec77442301d68b89
# Final digest: d395c1c0d7fde4b7d8eb09f89dc1511271ddd284a934f091ec77442301d68b89
# SHAKE256 test FAILED.


swpped:

# Squeeze Module: Extracted bits = dd1f3b9e1022d1f386cf16cd6b2a5295e51151c185c146d810502c46385c77c2b78ff54655c79e34532886ab0ebc84ef7b93928e3c2207dce35ab4d0edc72c695739b16f61961e14bec4b7b3ac2e294086b49a47491c82fcf692b5679d0105cb00f2c0d8ddc45dd72f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23138da80b2bddb946
# Truncate Module: Output digest = 2f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23138da80b2bddb946
# Final digest: 2f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23138da80b2bddb946
# SHAKE256 test FAILED.


_bitrev
# Squeeze Module: Extracted bits = cf8b440879dcf8bba94a54d6b368f3611b6283a1838a88a743ee3a1c62340a082c79e3aa62aff1edf7213d70d56114ca3be0443c7149c9de9634e3b70b2d5ac728786986f68d9cea02947435cded237d3f413892e2592d61d3a080b9e6ad496febba23bb1b034f00ad30e42676ab6ef4fcb34a57461dd841c4dcfcd72e7cd724629dbbd4d015b1c8
# Truncate Module: Output digest = ad30e42676ab6ef4fcb34a57461dd841c4dcfcd72e7cd724629dbbd4d015b1c8
# Final digest: ad30e42676ab6ef4fcb34a57461dd841c4dcfcd72e7cd724629dbbd4d015b1c8
# SHAKE256 test FAILED.
# ** Note: $finish    : D:/Documents/cShakeProject/cShakeProject/cShake_restored/tb_Shake256.v(99)
#    Time: 465 ns  Iteration: 0  Instance: /tb_Shake256


_rotated

# Squeeze Module: Extracted bits = 3a875b0deff46433dd1f3b9e1022d1f386cf16cd6b2a5295e51151c185c146d810502c46385c77c2b78ff54655c79e34532886ab0ebc84ef7b93928e3c2207dce35ab4d0edc72c695739b16f61961e14bec4b7b3ac2e294086b49a47491c82fcf692b5679d0105cb00f2c0d8ddc45dd72f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23
# Truncate Module: Output digest = 00f2c0d8ddc45dd72f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23
# Final digest: 00f2c0d8ddc45dd72f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23
# SHAKE256 test FAILED.
# ** Note: $finish    : D:/Documents/cShakeProject/cShakeProject/cShake_restored/tb_Shake256.v(99)
#    Time: 465 ns  Iteration: 0  Instance: /tb_Shake256


_byteswap

# Squeeze Module: Extracted bits = f3d122109e3b1fdd95522a6bcd16cf86d846c185c15111e5c2775c38462c5010349ec75546f58fb7ef84bc0eab862853dc07223c8e92937b692cc7edd0b45ae3141e96616fb1395740292eacb3b7c4befc821c49479ab486cb05019d67b592f6d75dc4ddd8c0f200b50c27646ed5762f3fcd52ea62b81b82233b3feb743eeb2446b9dd2b0ba88d13
# Truncate Module: Output digest = b50c27646ed5762f3fcd52ea62b81b82233b3feb743eeb2446b9dd2b0ba88d13
# Final digest: b50c27646ed5762f3fcd52ea62b81b82233b3feb743eeb2446b9dd2b0ba88d13
# SHAKE256 test FAILED.
# ** Note: $finish    : D:/Documents/cShakeProject/cShakeProject/cShake_restored/tb_Shake256.v(99)
#    Time: 465 ns  Iteration: 0  Instance: /tb_Shake256

_interleaved

 Squeeze Module: Extracted bits = bec4b7b3ac2e2940f692b5679d0105cb2f76d56e64270cb524eb3e74eb3f3b23ec77442301d68b89d8eb09f89dc15112e22da86c64fd3bd6b8ff7998f9f60fe4dd1f3b9e1022d1f3e51151c185c146d8b78ff54655c79e347b93928e3c2207dc5739b16f61961e1486b49a47491c82fc00f2c0d8ddc45dd7821bb862ea52cd3f138da80b2bddb946
# Truncate Module: Output digest = 86b49a47491c82fc00f2c0d8ddc45dd7821bb862ea52cd3f138da80b2bddb946
# Final digest: 86b49a47491c82fc00f2c0d8ddc45dd7821bb862ea52cd3f138da80b2bddb946
# SHAKE256 test FAILED.
# ** Note: $finish    : D:/Documents/cShakeProject/cShakeProject/cShake_restored/tb_Shake256.v(99)
#    Time: 465 ns  Iteration: 0  Instance: /tb_Shake256

_rotated3


# Squeeze Module: Extracted bits = 0162d17ae444523db8ff7998f9f60fe43a875b0deff46433dd1f3b9e1022d1f386cf16cd6b2a5295e51151c185c146d810502c46385c77c2b78ff54655c79e34532886ab0ebc84ef7b93928e3c2207dce35ab4d0edc72c695739b16f61961e14bec4b7b3ac2e294086b49a47491c82fcf692b5679d0105cb00f2c0d8ddc45dd72f76d56e64270cb5
# Truncate Module: Output digest = 86b49a47491c82fcf692b5679d0105cb00f2c0d8ddc45dd72f76d56e64270cb5
# Final digest: 86b49a47491c82fcf692b5679d0105cb00f2c0d8ddc45dd72f76d56e64270cb5
# SHAKE256 test FAILED.
# ** Note: $finish    : D:/Documents/cShakeProject/cShakeProject/cShake_restored/tb_Shake256.v(99)
#    Time: 465 ns  Iteration: 0  Instance: /tb_Shake256

_swappedHalves

# Squeeze Module: Extracted bits = 2f76d56e64270cb5821bb862ea52cd3f24eb3e74eb3f3b23138da80b2bddb946b78ff54655c79e34ec77442301d68b8971ddd284a934f091d8eb09f89dc15112d395c1c0d7fde4b7e22da86c64fd3bd60162d17ae444523db8ff7998f9f60fe43a875b0deff46433dd1f3b9e1022d1f386cf16cd6b2a5295e51151c185c146d810502c46385c77c2
# Truncate Module: Output digest = dd1f3b9e1022d1f386cf16cd6b2a5295e51151c185c146d810502c46385c77c2
# Final digest: dd1f3b9e1022d1f386cf16cd6b2a5295e51151c185c146d810502c46385c77c2
# SHAKE256 test FAILED.
# ** Note: $finish    : D:/Documents/cShakeProject/cShakeProject/cShake_restored/tb_Shake256.v(99)
#    Time: 465 ns  Iteration: 0  Instance: /tb_Shake256







`timescale 1ns/1ps
module SHAKE256 #(
  parameter STATE_WIDTH    = 1600,
  parameter RATE_WIDTH     = 1088,
  parameter CAPACITY_WIDTH = 512,
  parameter OUT_BITS       = 256
)(
  input  wire clk,
  input  wire reset,
  input  wire start,           
  input  wire enable,          // for Pad module serial input
  input  wire serial_in,       
  input  wire serial_end_signal,
  output wire done,            
  output wire [OUT_BITS-1:0] digest,
  
  // Debug outputs:
  output wire [3:0] debug_ctrl_state,
  output wire [2:0] debug_pad_state,
  output wire [10:0] debug_pad_bytecount,
  output wire [RATE_WIDTH-1:0] debug_pad_out,
  output wire debug_absorb_state,
  output wire [10:0] debug_absorb_i,
  output wire [STATE_WIDTH-1:0] debug_absorb_state_full,
  output wire [RATE_WIDTH-1:0] debug_squeeze_data,
  output wire [STATE_WIDTH-1:0] debug_pre_perm  // new debug signal from Absorb
);

  // Internal control signals from Control Unit.
  wire pad_start;
  wire absorb_start;
  wire squeeze_start;
  wire convert_start;
  wire truncate_start;
  wire encryption_done;
  
  // Done signals from each stage.
  wire pad_done;
  wire absorb_done;
  wire squeeze_done;
  wire convert_done;
  wire truncate_done;
  
  // Data paths between stages.
  wire [RATE_WIDTH-1:0] pad_out;
  wire [STATE_WIDTH-1:0] absorb_state; // Final state after Absorb (includes KeccakF1600)
  wire [RATE_WIDTH-1:0] squeeze_out;
  wire [RATE_WIDTH-1:0] converted_digest;
  wire [OUT_BITS-1:0] truncated_out;
  
  // Instantiate the Control Unit (one-shot, single block operation)
  Control_Unit cu (
    .clk(clk),
    .reset(reset),
    .start(start),
    .pad_done(pad_done),
    .absorb_done(absorb_done),
    .squeeze_done(squeeze_done),
	 .convert_done(convert_done),
    .truncate_done(truncate_done),
    .pad_start(pad_start),
    .absorb_start(absorb_start),
    .squeeze_start(squeeze_start),
	 .convert_start(convert_start),
    .truncate_start(truncate_start),
    .encryption_done(encryption_done),
    .debug_ctrl_state(debug_ctrl_state)
  );
  
  // Instantiate the updated Pad module.
  pad pad_inst (
    .clk(clk),
    .reset(reset),
    .pad_start(pad_start),
    .next_block(1'b0), // single-block operation
    .enable(enable),
    .serial_in(serial_in),
    .serial_end_signal(serial_end_signal),
    .message(pad_out),
    .pad_done(pad_done),
    .debug_pad_state(debug_pad_state),
    .debug_pad_bytecount(debug_pad_bytecount)
  );
  assign debug_pad_out = pad_out;
  
  // Latch the pad module's output.
  reg [RATE_WIDTH-1:0] pad_buffer;
  always @(posedge clk or posedge reset) begin
    if (reset)
      pad_buffer <= {RATE_WIDTH{1'b0}};
    else if (pad_done)
      pad_buffer <= pad_out;
  end
  
  // Instantiate the Absorb module (integrated with KeccakF1600)
  // It now provides a debug_pre_perm output that captures the state before permutation.
  Absorb absorb_inst (
    .clk(clk),
    .reset(reset),
    .absorb_start(absorb_start),
    .state_in({STATE_WIDTH{1'b0}}),  // initial sponge state is all zeros
    .Block({{(STATE_WIDTH - RATE_WIDTH){1'b0}}, pad_buffer}),
    .absorb_state_out(absorb_state),
    .absorb_done(absorb_done),
    .debug_absorb_state(debug_absorb_state),
    .debug_absorb_i(debug_absorb_i),
    .debug_pre_perm(debug_pre_perm)
  );
  assign debug_absorb_state_full = absorb_state;
  
  // Instantiate the Squeeze module.
  Squeeze_mod #(
    .RATE(RATE_WIDTH),
    .OUTPUT_WIDTH(RATE_WIDTH),
    .STATE_WIDTH(STATE_WIDTH)
  ) squeeze_inst (
    .clk(clk),
    .reset(reset),
    .squeeze_start(squeeze_start),
    .initial_state(absorb_state),
    .Squeezed_data(squeeze_out),
    .squeeze_done(squeeze_done)
  );
  assign debug_squeeze_data = squeeze_out;
  
   Convert_Digest #(
    .WIDTH_IN(RATE_WIDTH),  // Assuming the squeeze outputs RATE_WIDTH bits.
    .MAX_L(OUT_BITS)
  ) conv_inst (
    .clk(clk),
    .reset(reset),
    .convert_start(convert_start), // Triggered by the control unit.
    .Z(squeeze_out),
    .Y(converted_digest),
    .convert_done(convert_done)
  );
  
  // Instantiate the Truncate module.
  Truncate #(
    .WIDTH_IN(RATE_WIDTH),
    .MAX_L(OUT_BITS)
  ) truncate_inst (
    .clk(clk),
    .reset(reset),
    .truncate_start(truncate_start),
    .Z(converted_digest),
    .Y(truncated_out),
    .truncate_done(truncate_done)
  );
  
  // Final outputs.
  assign digest = truncated_out;
  assign done   = encryption_done;

endmodule



`timescale 1ns/1ps
module Control_Unit (
    input  wire clk,
    input  wire reset,
    input  wire start,             // external start signal
    input  wire pad_done,
    input  wire absorb_done,
    input  wire squeeze_done,
	 input wire convert_done,
    input  wire truncate_done,
    output reg pad_start,          // one-cycle pulse to trigger pad
    output reg absorb_start,       // one-cycle pulse to trigger absorb
    output reg squeeze_start,      // one-cycle pulse to trigger squeeze
	 output reg convert_start,
    output reg truncate_start,     // one-cycle pulse to trigger truncate
    output reg encryption_done,    // held high when finished
    output reg [3:0] debug_ctrl_state  // current state for debugging
);

  // Single block operation: no pad reset.
  localparam [3:0]
    IDLE            = 4'd0,
    PAD_PULSE       = 4'd1,
    PAD_WAIT        = 4'd2,
    ABSORB_PULSE    = 4'd3,
    ABSORB_WAIT     = 4'd4,
    SQUEEZE_PULSE   = 4'd5,
    SQUEEZE_WAIT    = 4'd6,
	 CONVERT_PULSE   = 4'd7,
	 CONVERT_WAIT    = 4'd8,
    TRUNCATE_PULSE  = 4'd9,
    TRUNCATE_WAIT   = 4'd10,
    DONE            = 4'd11;

  reg [3:0] state, next_state;

  // Sequential state update.
  always @(posedge clk or posedge reset) begin
    if (reset)
      state <= IDLE;
    else
      state <= next_state;
  end

  // Combinational logic for next state and output signals.
  always @(*) begin
    // Default: deassert all one-cycle pulses.
    pad_start      = 1'b0;
    absorb_start   = 1'b0;
    squeeze_start  = 1'b0;
	 convert_start  = 1'b0;
    truncate_start = 1'b0;
    encryption_done = 1'b0;
    
    case (state)
      IDLE: begin
         if (start)
            next_state = PAD_PULSE;
         else
            next_state = IDLE;
      end

      PAD_PULSE: begin
         pad_start = 1'b1;
         next_state = PAD_WAIT;
      end

      PAD_WAIT: begin
         if (pad_done)
            next_state = ABSORB_PULSE;
         else
            next_state = PAD_WAIT;
      end

      ABSORB_PULSE: begin
         absorb_start = 1'b1;
         next_state = ABSORB_WAIT;
      end

      ABSORB_WAIT: begin
         if (absorb_done)
            next_state = SQUEEZE_PULSE;
         else
            next_state = ABSORB_WAIT;
      end

      SQUEEZE_PULSE: begin
         squeeze_start = 1'b1;
         next_state = SQUEEZE_WAIT;
      end

      SQUEEZE_WAIT: begin
         if (squeeze_done)
            next_state = CONVERT_PULSE;
         else
            next_state = SQUEEZE_WAIT;
      end
		
		CONVERT_PULSE:	begin
			convert_start = 1'b1;
			next_state = CONVERT_WAIT;	
		end
		
		CONVERT_WAIT: begin
			if (convert_done)
				next_state = TRUNCATE_PULSE;
			else
				next_state = CONVERT_WAIT;
		end

      TRUNCATE_PULSE: begin
         truncate_start = 1'b1;
         next_state = TRUNCATE_WAIT;
      end

      TRUNCATE_WAIT: begin
         if (truncate_done)
            next_state = DONE;
         else
            next_state = TRUNCATE_WAIT;
      end

      DONE: begin
         encryption_done = 1'b1;
         next_state = DONE;
      end

      default: next_state = IDLE;
    endcase

    debug_ctrl_state = state;
  end

endmodule



sim:/tb_Shake256/digest 
f2675de64672c05b28b18b26ae25dcf342bee347bef3b33231d88ab0b2dd9b64







